# -------------------------
#  Android SDK Pipeline
# -------------------------
version: 2.1

# -------------------------
#       PARAMETERS
# -------------------------
parameters:
  deploy-sample:
    type: boolean
    default: false

# -------------------------
#          ORBS
# -------------------------
orbs:
  slack: circleci/slack@4.5.1
  android: circleci/android@2.0.3
  aws-s3: circleci/aws-s3@3.0
  jq: circleci/jq@2.2.0
  codecov: codecov/codecov@3.2.5

# -------------------------
#        EXECUTORS
# -------------------------
executors:
  android_compatible:
    machine: 
      image: android:default
    resource_class: large
    working_directory: ~/code

# -------------------------
#        REFERENCES
# -------------------------
references:
  is_main: &is_main
    matches:
      pattern: '^main$'
      value: << pipeline.git.branch >>

# -------------------------
#          COMMANDS
# -------------------------
commands:
  install_with_cache:
    description: 'Checkout from git and install gem and gradle dependencies'
    steps:
      - checkout
      - jq/install
      - restore_cache:
          name: Restore gem cache
          key: 3-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install gem dependencies
          command: bundle check || bundle install
      - save_cache:
          name: Save gem cache
          key: 3-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - aws-s3/copy:
          from: 's3://appcues-mobile-certs/appcues.keystore'
          to: './'
      - run:
          name: Generate Gradle cache key
          command: ./checksum.sh /tmp/checksum.txt
      - restore_cache:
          name: Restore Gradle cache
          key: gradle-{{ checksum "/tmp/checksum.txt" }}
  save_gradle_cache:
    description: 'Save Gradle cache'
    steps:
      - save_cache:
          key: gradle-{{ checksum "/tmp/checksum.txt" }}
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper

# -------------------------
#          JOBS
# --------------------------
jobs:
  additional-branch-validation:
    executor: android_compatible
    steps:
      - install_with_cache      
      - run:
          name: Run detekt
          command: ./gradlew detekt
      - run:
          name: Build sample app release
          command: ./gradlew :samples:kotlin-android-app:bundleRelease
      - store_artifacts:
          path: samples/kotlin-android-app/build/outputs
      - save_gradle_cache
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots
  deploy_sample:
    executor: android_compatible
    steps:
      - install_with_cache      
      - run:
          name: Deploy sample to Google Play
          command: bundle exec fastlane deploy_sample
      - save_gradle_cache
      - run:
          # some ideas from https://discuss.circleci.com/t/leveraging-circleci-api-to-include-build-logs-in-slack-notifications/39111
          name: Get changelog
          command: |
            APPCUES_SAMPLE_CHANGELOG=$(cat ./fastlane/metadata/android/en-US/changelogs/$CIRCLE_BUILD_NUM.txt | tail -n 10 | jq -aRs . | sed -e 's/^"//' -e 's/"$//')
            echo $APPCUES_SAMPLE_CHANGELOG
            echo "export APPCUES_SAMPLE_CHANGELOG='${APPCUES_SAMPLE_CHANGELOG}'" >> $BASH_ENV
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ Android Sample App Deployed to Google Play",
                    "emoji": true
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#5C5CFF",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "plain_text",
                        "text": "$APPCUES_SAMPLE_CHANGELOG",
                        "emoji": true
                      }
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View Job",
                            "emoji": true
                          },
                          "url": "$CIRCLE_BUILD_URL"
                        },
                                               {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View on Google Play",
                            "emoji": true
                          },
                          "url": "https://play.google.com/store/apps/details?id=com.appcues.samples.kotlin"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          channel: team-mobile-bots  
  trigger-spec-test-pipeline:
      docker: 
        - image: cimg/base:current
      resource_class: small
      steps:
        - run:
            name: Trigger spec pipeline
            # If there's a spec repo branch with the same name as the one currently executing,
            # trigger against that as a means to allow coordinated test updates.
            # If we get `{ "message" : "Branch not found" }`, fall back to running on `main`.
            command: |
              REMOTE_BRANCH=$CIRCLE_BRANCH

              create_remote_pipeline () {
                echo "Try remote job for $REMOTE_BRANCH"
                CREATED_PIPELINE_ID=$(curl --request POST \
                  --url https://circleci.com/api/v2/project/github/appcues/appcues-mobile-experience-spec/pipeline \
                  --header "Circle-Token: $CIRCLE_API_TOKEN" \
                  --header "content-type: application/json" \
                  --data "{ \"branch\": \"$REMOTE_BRANCH\", \"parameters\": { \"platform\": \"android\", \"sdk-branch\": \"$CIRCLE_BRANCH\", \"triggering-pipeline-id\": \"<< pipeline.id >>\" }}" \
                | jq -r '.id'
                )
              }

              create_remote_pipeline
              
              if [ "$CREATED_PIPELINE_ID" = 'null' ]
              then
                REMOTE_BRANCH='main'
                create_remote_pipeline
              fi

              echo "Triggered spec pipeline $CREATED_PIPELINE_ID on branch $REMOTE_BRANCH"
              echo $CREATED_PIPELINE_ID > pipeline.txt
        - persist_to_workspace:
            root: .
            paths: 
              - pipeline.txt
  check-status-of-spec-test-pipeline:
    docker: 
      - image: cimg/base:current
    resource_class: small 
    steps:
      # checkout so the source files are here for the codecov upload
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Check triggered workflow status
          command: |
            triggered_pipeline_id=$(cat workspace/pipeline.txt)
            curl --request GET \
                --url "https://circleci.com/api/v2/pipeline/${triggered_pipeline_id}/workflow" \
                --header "Circle-Token: $CIRCLE_API_TOKEN" \
                --header "content-type: application/json" \
                --output pipeline.json
            created_workflow_status=$(jq -r '.items[0].status' pipeline.json)
            echo $created_workflow_status
            if [[ "$created_workflow_status" != "success" ]]; then
              echo "Workflow not successful - ${created_workflow_status}"
              (exit -1) 
            fi
            
            echo "Created workflow successful"
      - run:
          name: Get codecov report
          command: |
            triggered_workflow_id=$(jq -r '.items[0].id' pipeline.json)
            created_job_number=$(curl --request GET \
                --url "https://circleci.com/api/v2/workflow/${triggered_workflow_id}/job" \
                --header "Circle-Token: $CIRCLE_API_TOKEN" \
                --header "content-type: application/json" \
              | jq -r '.items[0].job_number'
            )
            jacoco_artifact_url=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/github/appcues/appcues-mobile-experience-spec/${created_job_number}/artifacts" \
                --header "Circle-Token: $CIRCLE_API_TOKEN" \
                --header "content-type: application/json" \
              | jq -r '.items[] | select( .path == "build/reports/jacoco/codeCoverage/codeCoverage.xml" ).url'
            )
            curl -L "$jacoco_artifact_url?circle-token=$CIRCLE_API_TOKEN" --output codeCoverage.xml
      - codecov/upload:
          file: "codeCoverage.xml"
          token: CODECOV_TOKEN_APPCUES_ANDROID_SDK
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots

# --------------------------
#        WORKFLOWS
# --------------------------
workflows:
  version: 2
  branch_validation:
    when:
        not: << pipeline.parameters.deploy-sample >>
    jobs:
      - trigger-spec-test-pipeline:
          context:
            - Appcues
      - wait-for-spec-test-pipeline:
          type: approval
          requires: 
            - trigger-spec-test-pipeline
      - check-status-of-spec-test-pipeline:
          requires:
            - wait-for-spec-test-pipeline
          context:
            - Appcues
      - additional-branch-validation:
          context:
            - Appcues

  build_and_deploy_sample:
    when: << pipeline.parameters.deploy-sample >>
    jobs:
      - deploy_sample:
          context:
            - Appcues
