# -------------------------
#  Android SDK Pipeline
# -------------------------
version: 2.1

# -------------------------
#       PARAMETERS
# -------------------------
parameters:
  deploy-sample:
    type: boolean
    default: false

# -------------------------
#          ORBS
# -------------------------
orbs:
  slack: circleci/slack@4.5.1
  android: circleci/android@2.0.3
  aws-s3: circleci/aws-s3@3.0
  jq: circleci/jq@2.2.0
  codecov: codecov/codecov@3.2.5

# -------------------------
#        EXECUTORS
# -------------------------
executors:
  android_compatible:
    machine: 
      image: android:2023.07.1 #https://circleci.com/developer/machine/image/android
    resource_class: large
    working_directory: ~/code

# -------------------------
#        REFERENCES
# -------------------------
references:
  is_main: &is_main
    matches:
      pattern: '^main$'
      value: << pipeline.git.branch >>

# -------------------------
#          COMMANDS
# -------------------------
commands:
  install_with_cache:
    description: 'Checkout from git and install gem and gradle dependencies'
    steps:
      - checkout
      - jq/install
      - restore_cache:
          name: Restore gem cache
          key: 3-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install gem dependencies
          command: bundle check || bundle install
      - save_cache:
          name: Save gem cache
          key: 3-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - aws-s3/copy:
          from: 's3://appcues-mobile-certs/appcues.keystore'
          to: './'
      - run:
          name: Generate Gradle cache key
          command: ./checksum.sh /tmp/checksum.txt
      - restore_cache:
          name: Restore Gradle cache
          key: gradle-{{ checksum "/tmp/checksum.txt" }}
  save_gradle_cache:
    description: 'Save Gradle cache'
    steps:
      - save_cache:
          key: gradle-{{ checksum "/tmp/checksum.txt" }}
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper

# -------------------------
#          JOBS
# --------------------------
jobs:
  validate_code:
    executor: android_compatible
    steps:
      - install_with_cache      
      - run:
          name: Run fastlane validate_code
          command: bundle exec fastlane validate_code
      - store_artifacts:
          path: appcues/build/outputs
          destination: sdk_outputs
      - store_artifacts:
          path: samples/kotlin-android-app/build/outputs
          destination: sample_outputs
      - store_test_results:
          path: appcues/build/test-results
      - save_gradle_cache          
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots

  deploy_sample:
    executor: android_compatible
    steps:
      - install_with_cache      
      - run:
          name: Deploy sample to Google Play
          command: bundle exec fastlane deploy_sample
      - save_gradle_cache
      - run:
          # some ideas from https://discuss.circleci.com/t/leveraging-circleci-api-to-include-build-logs-in-slack-notifications/39111
          name: Get changelog
          command: |
            APPCUES_SAMPLE_CHANGELOG=$(cat ./fastlane/metadata/android/en-US/changelogs/$CIRCLE_BUILD_NUM.txt | tail -n 10 | jq -aRs . | sed -e 's/^"//' -e 's/"$//')
            echo $APPCUES_SAMPLE_CHANGELOG
            echo "export APPCUES_SAMPLE_CHANGELOG='${APPCUES_SAMPLE_CHANGELOG}'" >> $BASH_ENV
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ Android Sample App Deployed to Google Play",
                    "emoji": true
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#5C5CFF",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "plain_text",
                        "text": "$APPCUES_SAMPLE_CHANGELOG",
                        "emoji": true
                      }
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View Job",
                            "emoji": true
                          },
                          "url": "$CIRCLE_BUILD_URL"
                        },
                                               {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View on Google Play",
                            "emoji": true
                          },
                          "url": "https://play.google.com/store/apps/details?id=com.appcues.samples.kotlin"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          channel: team-mobile-bots  

  update_code_coverage:
    executor: android_compatible
    steps:
      - install_with_cache      
      - run:
          name: Generate code coverage report
          command: bundle exec fastlane code_coverage
      - codecov/upload:
          file: "./appcues/build/reports/jacoco/debugUnitTestCoverage/debugUnitTestCoverage.xml"
          token: CODECOV_TOKEN_APPCUES_ANDROID_SDK
      # not saving gradle cache on this job since it is SDK only
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: team-mobile-bots

# --------------------------
#        WORKFLOWS
# --------------------------
workflows:
  version: 2
  pr_validation:
    when:
      and:
        - not: *is_main
        - not: << pipeline.parameters.deploy-sample >>
    jobs:      
      - validate_code:
          context:
            - Appcues

  code_coverage:
    when:
      and:
        - *is_main
        - not: << pipeline.parameters.deploy-sample >>
    jobs:
      - update_code_coverage:
          context:
            - Appcues

  build_and_deploy_sample:
    when: << pipeline.parameters.deploy-sample >>
    jobs:
      - deploy_sample:
          context:
            - Appcues

  # an empty workflow to avoid Build Error: "All Workflows have been filtered from this Pipeline. No Jobs have been run."
  # the `when` selects for `is_main` and the filter ignores `main`.
  no-op:
    when:
      and:
        - *is_main
        - not: << pipeline.parameters.deploy-sample >>
    jobs:
      - validate_code:
          filters:
            branches:
              ignore:
                - main
            