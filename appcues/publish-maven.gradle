apply plugin: 'maven-publish'
apply plugin: 'signing'

def signingKey = System.getenv("GPG_SIGNING_KEY")
def signingKeyPwd = System.getenv("GPG_SIGNING_KEY_PWD")
def ossrhUsername = System.getenv("OSSRH_USERNAME")
def ossrhPassword = System.getenv("OSSRH_PASSWORD")

def appcuesProperties = new Properties()
file("appcues.properties").withInputStream { appcuesProperties.load(it) }

android {
    defaultConfig {
        buildConfigField "String", "SDK_VERSION", "\"${appcuesProperties.getProperty("VERSION")}\""
    }
}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = appcuesProperties.getProperty("GROUP_ID")
                artifactId = appcuesProperties.getProperty("ARTIFACT_ID")
                version = appcuesProperties.getProperty("VERSION")

                pom {
                    name = appcuesProperties.getProperty("NAME")
                    description = appcuesProperties.getProperty("DESCRIPTION")
                    url = appcuesProperties.getProperty("ORG_URL")
                    licenses {
                        license {
                            name = appcuesProperties.getProperty("LICENSE")
                            url = appcuesProperties.getProperty("LICENSE_URL")
                        }
                    }
                    developers {
                        developer {
                            id = appcuesProperties.getProperty("ORG_ID")
                            name = appcuesProperties.getProperty("ORG_NAME")
                            organization = appcuesProperties.getProperty("ORG_NAME")
                            organizationUrl = appcuesProperties.getProperty("ORG_URL")
                            email = appcuesProperties.getProperty("ORG_EMAIL")
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/' + appcuesProperties.getProperty("GITHUB_PATH") + '.git'
                        developerConnection = 'scm:git:ssh://github.com:' + appcuesProperties.getProperty("GITHUB_PATH") + '.git'
                        url = 'https://github.com/' + appcuesProperties.getProperty("GITHUB_PATH")
                    }
                }
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                groupId = appcuesProperties.getProperty("GROUP_ID")
                artifactId = appcuesProperties.getProperty("ARTIFACT_ID") + "-debug"
                version = appcuesProperties.getProperty("VERSION")
            }
        }
        repositories {
            maven {
                name = appcuesProperties.getProperty("MAVEN_NAME")
                url = appcuesProperties.getProperty("MAVEN_URL")
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        useInMemoryPgpKeys(signingKey, signingKeyPwd)
        sign publishing.publications.release
    }
}
