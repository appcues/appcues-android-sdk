plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'shot'
    id 'kotlin-kapt'
}

apply from: 'publish-maven.gradle'

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31

        testInstrumentationRunner "com.karumi.shot.ShotTestRunner"
        testApplicationId = "com.appcues.test"

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.1.0-rc01"
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    shot {
        applicationId = "com.appcues"
    }
}

dependencies {
    // Androidx
    implementation "androidx.core:core-ktx:1.7.0"
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.browser:browser:1.4.0"
    implementation "androidx.compose.ui:ui:1.1.1"
    implementation "androidx.compose.ui:ui-tooling:1.1.1"
    implementation "androidx.compose.material:material:1.1.1"
    implementation "com.google.android.material:material:1.5.0"
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation "androidx.room:room-runtime:2.4.2"
    implementation "androidx.room:room-ktx:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"
    // Image Loader
    implementation "io.coil-kt:coil-compose:1.4.0"
    implementation("io.coil-kt:coil-gif:1.4.0")
    implementation("io.coil-kt:coil-svg:1.4.0")
    // RESTApi
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"
    // Dependency Injection
    implementation "io.insert-koin:koin-core:3.1.4"
    implementation "io.insert-koin:koin-android:3.1.4"
    // View Pager
    implementation "com.google.accompanist:accompanist-pager:0.23.1"
    // Webview
    implementation "com.google.accompanist:accompanist-webview:0.24.5-alpha"

    testImplementation "junit:junit:4.13.2"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.3"
    testImplementation "io.mockk:mockk:1.12.2"
    testImplementation "com.google.truth:truth:1.1.3"

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.1.1"
    // Needed for createComposeRule
    androidTestImplementation "androidx.compose.ui:ui-test-manifest:1.1.1"
}

android.libraryVariants.all { variant ->
    task "copyDependencies${variant.name.capitalize()}"() {
        outputs.upToDateWhen { false }
        doLast {
            println "Executing copyDependencies${variant.name.capitalize()}"
            variant.getCompileClasspath().each { fileDependency ->
                def sourcePath = fileDependency.absolutePath
                def destinationPath = project.projectDir.path + "/build/dependencies/${variant.name}/"
                println "Copying dependency:"
                println sourcePath

                //The monstrous regex that gets the name of the lib from itâ€™s exploded .aar path
                def dependencyName
                if (sourcePath.contains("classes.jar")) {
                    def dependencyNameRegexResult = (sourcePath =~ /.*\/(.*)\.aar\/.*\/jars\/classes\.jar/)
                    if (dependencyNameRegexResult.size() > 0) {
                        dependencyName = dependencyNameRegexResult[0][1]
                        println "Exploded AAR found : ${dependencyName}"
                    }
                }

                copy {
                    from sourcePath
                    into destinationPath

                    rename {String filename ->
                        if (filename.contains("classes.jar") && dependencyName != null) {
                            dependencyName = "${dependencyName}.jar"
                            println "Renaming dependency file to : ${dependencyName}"
                            return dependencyName
                        }
                        return filename
                    }
                }
            }
        }
    }
}